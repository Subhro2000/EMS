/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ems;

import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Subhro Ghosh
 */
public class SeatAllocationPage extends javax.swing.JFrame
{

    /**
     * Creates new form SeatAllocationPage
     */
    
    private ConnectionToDatabase cdb;
    private Connection conn;
    private ArrayList<Student> studentList;
    private ArrayList<ExamRoom> roomList;
    DefaultListModel modelStudent;
    DefaultTableModel modelAlloc;
    
    public SeatAllocationPage()
    {
        initComponents();
        
        cdb = new ConnectionToDatabase();
        
        try
        {
            conn = cdb.startConnection();
        } catch (SQLException ex)
        {
//            Logger.getLogger(UserSignUpPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        studentList = new ArrayList<>();
        roomList = new ArrayList<>();
        
        modelStudent = new DefaultListModel();
        listStudentName.setModel(modelStudent);
        String s = String.format("%-3s%-20s%-6s%-6s", "Id","Name","Zone1","Zone2");
        modelStudent.addElement(s);
        
        String colNames[] = "Student Id,Student Name,Center Id,Center Name,Room No,Zone Id,Zone Name".split(",");
        modelAlloc = new DefaultTableModel(colNames, 0);
        tableAllocation.setModel(modelAlloc);
        
        try
        {
            fillStudentList();
            fillRoomList();
        } catch (SQLException ex)
        {
            Logger.getLogger(SeatAllocationPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        populateAllocationTable();
        
        this.setVisible(true);
        
        if (tableAllocation.getRowCount()>0)
        {
            btnAllocate.setEnabled(false);
            JOptionPane.showMessageDialog(this, "Seat Is Already Allocated");
        }
        
        
    }
    
    
    private void fillStudentList() throws SQLException
    {
        String fetch = "SELECT Student_Id, Name, EPref_Zone1_Id, EPref_Zone2_Id FROM Student WHERE Roll_No != 0";
//        String fetch = "SELECT Student_Id, Name, EPref_Zone1_Id, EPref_Zone2_Id FROM Student";
        
        PreparedStatement psmt = conn.prepareStatement(fetch);
        
        ResultSet rs = psmt.executeQuery();
        
        while(rs.next())
        {
            int id = rs.getInt("Student_Id");
            String name = rs.getString("Name");
            int zone1 = rs.getInt("EPref_Zone1_Id");
            int zone2 = rs.getInt("EPref_Zone2_Id");
            Student stu = new Student(id, name, zone1, zone2);
            studentList.add(stu);
            String s = String.format("%-2d.%-20s%-5d%-5d", id,name,zone1,zone2);
            modelStudent.addElement(s);
        }
        
    }
    
    private void fillRoomList() throws SQLException
    {
        String fetch = "SELECT r.Center_Id, r.Room_No, r.Capacity, c.Zone_Id FROM CenterRoom r, ExamCenter c WHERE c.Center_Id = r.Center_Id";
        
        PreparedStatement psmt = conn.prepareStatement(fetch);
        
        ResultSet rs = psmt.executeQuery();
        
        while(rs.next())
        {
            int cid = rs.getInt("r.Center_Id");
            String name = rs.getString("r.Room_No");
            int cap = rs.getInt("r.Capacity");
            int zid = rs.getInt("c.Zone_Id");
            
            ExamRoom room = new ExamRoom(cid, zid, name, cap);
            roomList.add(room);
        }
        
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listStudentName = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAllocation = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnAllocate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seat Allocation");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 3));

        listStudentName.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(listStudentName);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Student List");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(204, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jLabel1)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 51), 3));

        jScrollPane2.setViewportView(tableAllocation);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Allocated Student Table");
        jLabel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(51, 153, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        btnAllocate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAllocate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images&Icons/selection.png"))); // NOI18N
        btnAllocate.setText("Allocate");
        btnAllocate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAllocate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAllocateActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images&Icons/close.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGap(428, 428, 428)
                .addComponent(btnAllocate)
                .addGap(36, 36, 36)
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAllocate)
                    .addComponent(btnCancel))
                .addGap(29, 29, 29))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAllocateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAllocateActionPerformed
    {//GEN-HEADEREND:event_btnAllocateActionPerformed
            // TODO add your handling code here:
            
            seatAlloc(studentList, roomList);
            saveToDatabase(studentList);
            populateAllocationTable();
            JOptionPane.showMessageDialog(this, "Seat Allocated Successfully!");
            btnAllocate.setEnabled(false);
    }//GEN-LAST:event_btnAllocateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
        // TODO add your handling code here:
        cdb.closeConnection();
        this.setVisible(false);
        new AdminHomePage();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        // TODO add your handling code here:
         cdb.closeConnection();
        new AdminHomePage();
        
    }//GEN-LAST:event_formWindowClosing
    
    private void seatAlloc(ArrayList<Student> sList, ArrayList<ExamRoom> rList)
    {
        // For allocate seat based on 1st preference zone
        for (ExamRoom room : rList)
        {
            for (Student student : sList)
            {
                if(student.getAllocMark() == 0)
                {
                    int zid1 = student.getzPref1();
                    int roomZone = room.getZoneId();

                    if(room.getFilledCapacity() < room.getCapacity())
                    {
                        if(roomZone == zid1)
                        {
                            room.setFilledCapacity((room.getFilledCapacity())+1);
                            student.setAllocRoom(room.getRoomNo());
                            student.setAllocMark(1);
                        }
                    }
                }
            }
        }
        
        for (ExamRoom room2 : rList)
        {
            for (Student student2 : sList)
            {
                if(student2.getAllocMark() == 0)
                {
                    int zid2 = student2.getzPref2();
                    int roomZone = room2.getZoneId();
                    if(room2.getFilledCapacity() < room2.getCapacity())
                    {
                        if(roomZone == zid2)
                        {
                            room2.setFilledCapacity((room2.getFilledCapacity())+1);
                            student2.setAllocRoom(room2.getRoomNo());
                            student2.setAllocMark(1);
                        }
                    }
                    
                }
            }
        }
        
        
        for (ExamRoom room3 : rList)
        {
            if(room3.getFilledCapacity() < room3.getCapacity())
            {
                for (Student student3 : sList)
                {
                    if(student3.getAllocMark() == 0)
                    {
                        room3.setFilledCapacity((room3.getFilledCapacity())+1);
                        student3.setAllocRoom(room3.getRoomNo());
                        student3.setAllocMark(1);
                    }
                }
            }
        }
    }    
    
    private void saveToDatabase(ArrayList<Student> sList)
    {
        for (Student student : sList)
        {
            int sId = student.getStudentId();
            String roomNo = student.getAllocRoom();
            int cId = getCenterId(roomNo);
            
            try
            {
                PreparedStatement psmt = conn.prepareStatement("INSERT INTO SeatAlloc VALUES(?,?,?)");
                psmt.setInt(1, sId);
                psmt.setInt(2, cId);
                psmt.setString(3, roomNo);
                
                int count = psmt.executeUpdate();
                
                
            } catch (SQLException ex)
            {
                Logger.getLogger(SeatAllocationPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }
    
    private int getCenterId(String roomNo)
    {
        
        int cId = 0;
        
        try
        {
            String fetch = "SELECT Center_Id FROM CenterRoom WHERE Room_No = ?";
            PreparedStatement psmt = conn.prepareStatement(fetch);
            psmt.setString(1, roomNo);
            
            ResultSet rs = psmt.executeQuery();
            if(rs.next())
            {
                cId = rs.getInt("Center_Id");
            }
            
        } catch (SQLException ex)
        {
            Logger.getLogger(SeatAllocationPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return cId;
    }
    
    
    private void populateAllocationTable()
    {
        
        
        try
        {
            String fetch = "SELECT s.Student_Id, a.Name, s.Center_Id, c.Name, s.Room_No, c.Zone_Id, z.Name "
                    + "FROM SeatAlloc s, ExamCenter c, Student a, ExamZone z where s.Center_Id = c.Center_Id and s.Student_Id = a.Student_Id and c.Zone_Id = z.Zone_Id; ";
            
            PreparedStatement psmt;
            ResultSet rs = null;
            psmt = conn.prepareStatement(fetch);
            rs = psmt.executeQuery();
            
            while(rs.next())
            {
                Object ar[] = {rs.getInt("s.Student_Id"),rs.getString("a.Name"),rs.getInt("s.Center_Id"),rs.getString("c.Name"),rs.getString("s.Room_No"),
                    rs.getInt("c.Zone_Id"),rs.getString("z.Name")};
                
                modelAlloc.addRow(ar);
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(SeatAllocationPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(SeatAllocationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(SeatAllocationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(SeatAllocationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(SeatAllocationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new SeatAllocationPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllocate;
    private javax.swing.JButton btnCancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listStudentName;
    private javax.swing.JTable tableAllocation;
    // End of variables declaration//GEN-END:variables
}
